<?php
App::uses('AppController', 'Controller');
/**
 * Users Controller
 *
 * @property User $User
 */
class UsersController extends AppController {

public function beforeFilter() {
parent::beforeFilter();
$this->Auth->allow('*');
}
/**
 * index method
 *
 * @return void
 */
public function index() { 
//pr($this->User);
$this->User->recursive = 0;       //Cake fetches Group data and its domain
//pr($this->paginate());               //like ..find all query database  
$this->set('users', $this->paginate());
}

/**
 * view method
 *
 * @param string $id
 * @return void
 */
public function view($id = null) {
$this->User->id = $id;
if (!$this->User->exists()) {
throw new NotFoundException(__('Invalid user'));
}
$this->set('user', $this->User->read(null, $id));     //send to .ctp
}

/**
 * add method
 *
 * @return void
 */
public function add() {
if ($this->request->is('post')) {                                //if input is keyin data true
$this->User->create();                                       // create a new user
if ($this->User->save($this->request->data)) {               //save input request data from input form
$this->Session->setFlash(__('The user has been saved'));
$this->redirect(array('action' => 'index'));                //jump to index page
} else {
$this->Session->setFlash(__('The user could not be saved. Please, try again.'));
}
}
$sites = $this->User->Site->find('list');          //query site table ON BELONGTO from model
$groups = $this->User->Group->find('list');
$this->set(compact('groups','sites'));                            //set compact---- .ctp able to read that variable 
}

/**
 * edit method
 *
 * @param string $id
 * @return void
 */
public function edit($id = null) {
$this->User->id = $id;
if (!$this->User->exists()) {
throw new NotFoundException(__('Invalid user'));
}
if ($this->request->is('post') || $this->request->is('put')) {
$save = true;                                                 //swicthing save or not save
//if one or both not null 
if ($this->request->data['User']['password1'] != null or $this->request->data['User']['password2'] != null) { 
//if inputtext1 and inputtext2 are same..
if($this->request->data['User']['password1'] == $this->request->data['User']['password2'] ) {  
$this->request->data['User']['password'] = $this->request->data['User']['password1'];
}else
{
$this->Session->setFlash(__('The password not match Please, try again.'));
$save = false;
}
			}
			if ($save) {
				if ($this->User->save($this->request->data)) {     // jika save data dari input
					$this->Session->setFlash(__('The user has been saved')); 
					$this->redirect(array('action' => 'index'));
				} else {
					$this->Session->setFlash(__('The user could not be saved. Please, try again.'));
				}
			}
			
		} else {
			$this->request->data = $this->User->read(null, $id); //jika tiada input from form ...read var id 
		}
		$sites = $this->User->Site->find('list');   //query	site dalam user
		$groups = $this->User->Group->find('list'); //query group dalam user
		$this->set(compact('groups','sites'));    //hantar ke .ctp 
	}

/**
 * delete method
 *
 * @param string $id
 * @return void
 */
	public function delete($id = null) {
		if (!$this->request->is('post')) {
			throw new MethodNotAllowedException();
		}
		$this->User->id = $id;
		if (!$this->User->exists()) {
			throw new NotFoundException(__('Invalid user'));
		}
		if ($this->User->delete()) {
			$this->Session->setFlash(__('User deleted'));
			$this->redirect(array('action' => 'index'));
		}
		$this->Session->setFlash(__('User was not deleted'));
		$this->redirect(array('action' => 'index'));
	}
	
	public function login() {
		$this->layout = false;
		if ($this->request->is('post')) { // jika ada data dari input text
			if ($this->Auth->login()) {   //
				$this->Session->setFlash('Welcome.');
				$this->redirect(array('controller'=>'acctransactions','action' => 'entry'));
			} else {
				$this->Session->setFlash('Your username or password was incorrect.');
			}
		}
	}

	public function logout() {
	    $this->Session->setFlash('Good-Bye');
		$this->redirect($this->Auth->logout());
	}
	
	public function initDB() {
	    $group = $this->User->Group;
	    //Allow admins to everything
	    $group->id = 1;
	    $this->Acl->allow($group, 'controllers');  //kebenaran access page dan controller

	    //allow managers to posts and widgets
	    $group->id = 2;
	     $this->Acl->allow($group, 'controllers');

	    //allow users to only add and edit on posts and widgets
	    $group->id = 3;
	     $this->Acl->allow($group, 'controllers');
	     
	     //allow users to only add and edit on posts and widgets
	    $group->id = 4;
	     $this->Acl->allow($group, 'controllers');
	     
	     
	     
	    //we add an exit to avoid an ugly "missing views" error message
	    echo "all done";
	    exit;
	}
}
